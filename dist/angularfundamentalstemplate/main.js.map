{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/loader/loader.component.html","./src/app/loader/loader.component.ts","./src/app/mock-data.service.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport {\r\n  combineLatest,\r\n  debounceTime,\r\n  filter,\r\n  forkJoin,\r\n  map,\r\n  mergeMap,\r\n  Observable,\r\n  Subject,\r\n  Subscription\r\n} from \"rxjs\";\r\nimport { MockDataService } from \"./mock-data.service\";\r\n\r\n@Component({\r\n  selector: \"app-root\",\r\n  templateUrl: \"./app.component.html\",\r\n  styleUrls: [\"./app.component.scss\"]\r\n})\r\nexport class AppComponent implements OnInit, OnDestroy {\r\n  searchTermByCharacters = new Subject<string>();\r\n  charactersResults$!: Observable<any>;\r\n  planetAndCharactersResults$!: Observable<any>;\r\n  isLoading: boolean = false;\r\n  subscriptions: Subscription[] = [];\r\n\r\n  constructor(private mockDataService: MockDataService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initLoadingState();\r\n    this.initCharacterEvents();\r\n  }\r\n\r\n  changeCharactersInput(element: any): void {\r\n    // 1.1. Add functionality to changeCharactersInput method. Changes searchTermByCharacters Subject value on input change.\r\n    const inputValue: string = element.target.value;\r\n    // YOUR CODE STARTS HERE\r\n    this.searchTermByCharacters.next(inputValue);\r\n    // YOUR CODE ENDS HERE\r\n  }\r\n\r\n  initCharacterEvents(): void {\r\n    // 1.2. Add API call on each user input. Use mockDataService.getCharacters - to make get request.\r\n    // 2. Since we don't want to spam our service add filter by input value and do not call API until a user enters at least 3 chars.\r\n    // 3. Add debounce to prevent API calls until user stop typing.\r\n\r\n    this.charactersResults$ = this.searchTermByCharacters.pipe(\r\n      // YOUR CODE STARTS HERE\r\n      filter((value) => value.length >= 3),\r\n      debounceTime(200),\r\n      mergeMap((value) => this.mockDataService.getCharacters(value))\r\n      // YOUR CODE ENDS HERE\r\n    );\r\n  }\r\n\r\n  loadCharactersAndPlanet(): void {\r\n    // 4. On clicking the button 'Load Characters And Planets', it is necessary to process two requests and combine the results of both requests into one result array. As a result, a list with the names of the characters and the names of the planets is displayed on the screen.\r\n    // YOUR CODE STARTS HERE\r\n    this.planetAndCharactersResults$ = forkJoin([\r\n      this.mockDataService.getCharacters(),\r\n      this.mockDataService.getPlanets()\r\n    ]).pipe(map((value) => [...value[0], ...value[1]]));\r\n    // YOUR CODE ENDS HERE\r\n  }\r\n\r\n  initLoadingState(): void {\r\n    /* 5.1. Let's add loader logic to our page. For each request, we have an observable that contains the state of the request. When we send a request the value is true, when the request is completed, the value becomes false. You can get value data with mockDataService.getCharactersLoader() and mockDataService.getPlanetLoader().\r\n\r\n    - Combine the value of each of the streams.\r\n    - Subscribe to changes\r\n    - Check the received value using the areAllValuesTrue function and pass them to the isLoading variable. */\r\n    // YOUR CODE STARTS HERE\r\n    combineLatest(\r\n      this.mockDataService.getCharactersLoader(),\r\n      this.mockDataService.getPlanetLoader()\r\n    ).subscribe((value) => {\r\n      this.isLoading = this.areAllValuesTrue(value);\r\n    });\r\n    // YOUR CODE ENDS HERE\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // 5.2 Unsubscribe from all subscriptions\r\n    // YOUR CODE STARTS HERE\r\n    this.subscriptions.forEach((sub) => sub.unsubscribe());\r\n    // YOUR CODE ENDS HERE\r\n  }\r\n\r\n  areAllValuesTrue(elements: boolean[]): boolean {\r\n    return elements.every((el) => el);\r\n  }\r\n}\r\n","<loader [isLoading]=\"isLoading\"></loader>\r\n<div class=\"content\">\r\n    <div class=\"logo\">\r\n        <img src=\"https://brandpalettes.com/wp-content/uploads/2021/06/star-wars-color-codes.svg\" width=\"100\"/>\r\n    </div>\r\n\r\n    <input (keyup)=\"changeCharactersInput($event)\" [placeholder]=\"'Search by characters'\"/>\r\n    <ng-container *ngIf=\"charactersResults$ | async as results\">\r\n        <div *ngIf=\"results.length > 0; else noResults\">\r\n            <div *ngFor=\"let item of results\">\r\n                {{ item.name }}\r\n            </div>\r\n        </div>\r\n        <ng-template #noResults> No results </ng-template>\r\n    </ng-container>\r\n\r\n    <button (click)=\"loadCharactersAndPlanet()\">Load Characters And Planets</button>\r\n    <ng-container *ngIf=\"planetAndCharactersResults$ | async as results\">\r\n        <div *ngIf=\"results.length > 0; else noResults\">\r\n            <div *ngFor=\"let item of results\">\r\n                {{ item.name }}\r\n            </div>\r\n        </div>\r\n        <ng-template #noResults> No results </ng-template>\r\n    </ng-container>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppComponent } from '@app/app.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { MockDataService } from '@app/mock-data.service';\r\nimport { AppLoader } from '@app/loader/loader.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent, AppLoader\r\n  ],\r\n  imports: [\r\n    BrowserModule, FormsModule, ReactiveFormsModule, HttpClientModule,\r\n  ],\r\n  providers: [MockDataService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","<div class=\"container\" *ngIf=\"isLoading\">\r\n    <div class=\"loader\"></div>\r\n</div>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'loader',\r\n    templateUrl: './loader.component.html',\r\n    styleUrls: ['./loader.component.scss'],\r\n})\r\nexport class AppLoader {\r\n    @Input() public isLoading: boolean = false;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, finalize, map, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class MockDataService {\r\n    public charactersLoader$ = new BehaviorSubject<boolean>(false);\r\n    public planetsLoader$ = new BehaviorSubject<boolean>(false);\r\n\r\n    constructor(private httpClient: HttpClient) {}\r\n\r\n    getCharacters(searchTerm?: string): Observable<any> {\r\n        this.charactersLoader$.next(true);\r\n        const queryParams: string = searchTerm ? `?search=${searchTerm}` : '';\r\n        return this.httpClient\r\n            .get<any>(`https://swapi.dev/api/people/${queryParams}`)\r\n            .pipe(finalize(() => this.charactersLoader$.next(false)))\r\n            .pipe(map((response) => response.results));\r\n    }\r\n\r\n    getPlanets(searchTerm?: string): Observable<any> {\r\n        this.planetsLoader$.next(true);\r\n        const queryParams: string = searchTerm ? `?search=${searchTerm}` : '';\r\n        return this.httpClient\r\n            .get<any>(`https://swapi.dev/api/planets/${queryParams}`)\r\n            .pipe(finalize(() => this.planetsLoader$.next(false)))\r\n            .pipe(map((response) => response.results));\r\n    }\r\n\r\n    getCharactersLoader(): Observable<boolean> {\r\n        return this.charactersLoader$;\r\n    }\r\n\r\n    getPlanetLoader(): Observable<boolean> {\r\n        return this.planetsLoader$;\r\n    }\r\n}\r\n","export const environment = {\r\n    production: false,\r\n    apiURL: 'http://localhost:4000'\r\n  };","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"names":["combineLatest","debounceTime","filter","forkJoin","map","mergeMap","Subject","i0","AppComponent","constructor","mockDataService","ngOnInit","initLoadingState","initCharacterEvents","changeCharactersInput","element","inputValue","target","value","searchTermByCharacters","next","charactersResults$","pipe","length","getCharacters","loadCharactersAndPlanet","planetAndCharactersResults$","getPlanets","getCharactersLoader","getPlanetLoader","subscribe","isLoading","areAllValuesTrue","ngOnDestroy","subscriptions","forEach","sub","unsubscribe","elements","every","el","selectors","decls","vars","consts","template","ctx","BrowserModule","FormsModule","ReactiveFormsModule","HttpClientModule","MockDataService","AppLoader","AppModule","bootstrap","imports","declarations","inputs","BehaviorSubject","finalize","httpClient","searchTerm","charactersLoader$","queryParams","get","response","results","planetsLoader$","factory","providedIn","environment","production","apiURL","enableProdMode","__NgCli_bootstrap_1","bootstrapModule","catch","err","console","error"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}